// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "/home/xli4217/Desktop/usoverlay/build_clarity_sim/ClarityUI.h"

void ClarityUI::cb_beepButton_i(Fl_Button*, void*) {
  beepClicked = true;
}
void ClarityUI::cb_beepButton(Fl_Button* o, void* v) {
  ((ClarityUI*)(o->parent()->user_data()))->cb_beepButton_i(o,v);
}

void ClarityUI::cb_initializeButton_i(Fl_Button*, void*) {
  initializeClicked = true;
}
void ClarityUI::cb_initializeButton(Fl_Button* o, void* v) {
  ((ClarityUI*)(o->parent()->user_data()))->cb_initializeButton_i(o,v);
}

void ClarityUI::cb_trackButton_i(Fl_Button*, void*) {
  trackClicked = true;
}
void ClarityUI::cb_trackButton(Fl_Button* o, void* v) {
  ((ClarityUI*)(o->parent()->user_data()))->cb_trackButton_i(o,v);
}

ClarityUI::ClarityUI() {
  { DisplayWindow = new Fl_Double_Window(479, 248, "ClarityClient");
    DisplayWindow->color(FL_BACKGROUND2_COLOR);
    DisplayWindow->selection_color((Fl_Color)31);
    DisplayWindow->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(5, 56, 465, 187);
      o->box(FL_PLASTIC_UP_FRAME);
      o->color((Fl_Color)222);
      o->align(Fl_Align(65));
      { Fl_Group* o = new Fl_Group(70, 154, 394, 81, "Robot Tip");
        o->box(FL_PLASTIC_UP_FRAME);
        o->color((Fl_Color)222);
        o->labelfont(1);
        o->labelsize(16);
        o->align(Fl_Align(196));
        { new Fl_Box(88, 166, 75, 22, "Position");
        } // Fl_Box* o
        { TipPosition[0] = new Fl_Value_Output(157, 165, 77, 25, " ");
          TipPosition[0]->box(FL_PLASTIC_THIN_UP_BOX);
          TipPosition[0]->color((Fl_Color)174);
          TipPosition[0]->labelfont(1);
          TipPosition[0]->minimum(-1e+06);
          TipPosition[0]->maximum(1e+06);
        } // Fl_Value_Output* TipPosition[0]
        { TipPosition[1] = new Fl_Value_Output(246, 165, 77, 25, " ");
          TipPosition[1]->box(FL_PLASTIC_THIN_UP_BOX);
          TipPosition[1]->color((Fl_Color)174);
          TipPosition[1]->labelfont(1);
          TipPosition[1]->minimum(-1e+06);
          TipPosition[1]->maximum(1e+06);
        } // Fl_Value_Output* TipPosition[1]
        { TipPosition[2] = new Fl_Value_Output(334, 165, 77, 25, " ");
          TipPosition[2]->box(FL_PLASTIC_THIN_UP_BOX);
          TipPosition[2]->color((Fl_Color)174);
          TipPosition[2]->labelfont(1);
          TipPosition[2]->minimum(-1e+06);
          TipPosition[2]->maximum(1e+06);
        } // Fl_Value_Output* TipPosition[2]
        { TipPosition[3] = new Fl_Value_Output(157, 198, 77, 25);
          TipPosition[3]->box(FL_PLASTIC_THIN_UP_BOX);
          TipPosition[3]->color((Fl_Color)245);
          TipPosition[3]->minimum(-1e+06);
          TipPosition[3]->maximum(1e+06);
        } // Fl_Value_Output* TipPosition[3]
        { TipPosition[4] = new Fl_Value_Output(246, 198, 77, 25);
          TipPosition[4]->box(FL_PLASTIC_THIN_UP_BOX);
          TipPosition[4]->color((Fl_Color)245);
          TipPosition[4]->minimum(-1e+06);
          TipPosition[4]->maximum(1e+06);
        } // Fl_Value_Output* TipPosition[4]
        { TipPosition[5] = new Fl_Value_Output(335, 196, 77, 25);
          TipPosition[5]->box(FL_PLASTIC_THIN_UP_BOX);
          TipPosition[5]->color((Fl_Color)245);
          TipPosition[5]->minimum(-1e+06);
          TipPosition[5]->maximum(1e+06);
        } // Fl_Value_Output* TipPosition[5]
        { new Fl_Box(411, 166, 45, 25, "mm");
        } // Fl_Box* o
        { new Fl_Box(70, 199, 83, 22, "Orientation");
        } // Fl_Box* o
        { new Fl_Box(414, 195, 45, 25, "deg");
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(70, 66, 394, 81, "Robot Base");
        o->box(FL_PLASTIC_UP_FRAME);
        o->color((Fl_Color)222);
        o->labelfont(1);
        o->labelsize(16);
        o->align(Fl_Align(132));
        { new Fl_Box(88, 78, 75, 22, "Position");
        } // Fl_Box* o
        { BasePosition[0] = new Fl_Value_Output(157, 77, 77, 25, " ");
          BasePosition[0]->box(FL_PLASTIC_THIN_UP_BOX);
          BasePosition[0]->color((Fl_Color)174);
          BasePosition[0]->labelfont(1);
          BasePosition[0]->minimum(-1e+06);
          BasePosition[0]->maximum(1e+06);
        } // Fl_Value_Output* BasePosition[0]
        { BasePosition[1] = new Fl_Value_Output(246, 77, 77, 25, " ");
          BasePosition[1]->box(FL_PLASTIC_THIN_UP_BOX);
          BasePosition[1]->color((Fl_Color)174);
          BasePosition[1]->labelfont(1);
          BasePosition[1]->minimum(-1e+06);
          BasePosition[1]->maximum(1e+06);
        } // Fl_Value_Output* BasePosition[1]
        { BasePosition[2] = new Fl_Value_Output(334, 77, 77, 25, " ");
          BasePosition[2]->box(FL_PLASTIC_THIN_UP_BOX);
          BasePosition[2]->color((Fl_Color)174);
          BasePosition[2]->labelfont(1);
          BasePosition[2]->minimum(-1e+06);
          BasePosition[2]->maximum(1e+06);
        } // Fl_Value_Output* BasePosition[2]
        { BasePosition[3] = new Fl_Value_Output(157, 110, 77, 25);
          BasePosition[3]->box(FL_PLASTIC_THIN_UP_BOX);
          BasePosition[3]->color((Fl_Color)245);
          BasePosition[3]->minimum(-1e+06);
          BasePosition[3]->maximum(1e+06);
        } // Fl_Value_Output* BasePosition[3]
        { BasePosition[4] = new Fl_Value_Output(246, 110, 77, 25);
          BasePosition[4]->box(FL_PLASTIC_THIN_UP_BOX);
          BasePosition[4]->color((Fl_Color)245);
          BasePosition[4]->minimum(-1e+06);
          BasePosition[4]->maximum(1e+06);
        } // Fl_Value_Output* BasePosition[4]
        { BasePosition[5] = new Fl_Value_Output(335, 108, 77, 25);
          BasePosition[5]->box(FL_PLASTIC_THIN_UP_BOX);
          BasePosition[5]->color((Fl_Color)245);
          BasePosition[5]->minimum(-1e+06);
          BasePosition[5]->maximum(1e+06);
        } // Fl_Value_Output* BasePosition[5]
        { new Fl_Box(411, 78, 45, 25, "mm");
        } // Fl_Box* o
        { new Fl_Box(70, 111, 83, 22, "Orientation");
        } // Fl_Box* o
        { new Fl_Box(414, 107, 45, 25, "deg");
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { beepButton = new Fl_Button(7, 9, 70, 40, "Beep");
      beepButton->box(FL_PLASTIC_THIN_UP_BOX);
      beepButton->color((Fl_Color)135);
      beepButton->callback((Fl_Callback*)cb_beepButton);
    } // Fl_Button* beepButton
    { initializeButton = new Fl_Button(320, 8, 70, 40, "Initialize");
      initializeButton->box(FL_PLASTIC_THIN_UP_BOX);
      initializeButton->color((Fl_Color)183);
      initializeButton->callback((Fl_Callback*)cb_initializeButton);
    } // Fl_Button* initializeButton
    { trackButton = new Fl_Button(398, 7, 70, 40, "Track");
      trackButton->box(FL_PLASTIC_THIN_UP_BOX);
      trackButton->color(FL_GREEN);
      trackButton->callback((Fl_Callback*)cb_trackButton);
    } // Fl_Button* trackButton
    { beepCount = new Fl_Spinner(88, 15, 70, 30);
      beepCount->labelsize(16);
      beepCount->maximum(10);
      beepCount->value(3);
      beepCount->textsize(16);
    } // Fl_Spinner* beepCount
    DisplayWindow->end();
  } // Fl_Double_Window* DisplayWindow
  //set defaults
  ConnectButtonClicked = false;
  beepClicked = false;
  initializeClicked = false;
  trackClicked = false;
}

void ClarityUI::show(int argc, char** argv) {
  DisplayWindow->show();
}
