# This module was tested on 3D Slicer version 4.4# To get the latest version of 3D Slicer, visit http://download.slicer.org# This file (or the corresponding .pyc file) should be located in# 'C:\Program Files\Slicer 4.3.1\lib\Slicer-4.3\qt-scripted-modules\USOverlayLib.py'## IMPORTANT NOTICE: This version of USOverlayLib.py is not compatible with 3D Slicer version 3.x### Xiao Li, Sungmin Kim and Peter Kazanzides## This should be consistent with main CMakeLists.txtimport os, sys, math, json, time, socket, numpyfrom __main__ import vtk, qt, ctk, slicer# USOverlay Configuration Filefrom USOverlayConfig import *################################ GLOBAL FUNCTIONS ##################################################### USOverlayGUIInternal#class USOverlayGUIInternal:    def __init__(self, parent = None):        if not parent:            self.parent = slicer.qMRMLWidget()            self.parent.setLayout(qt.QVBoxLayout())            self.parent.setMRMLScene(slicer.mrmlScene)        else:            self.parent = parent        self.layout = self.parent.layout()        if not parent:            self.setup()            self.parent.show()        self.scene = slicer.mrmlScene        self.scene.AddObserver(slicer.vtkMRMLScene.NodeAddedEvent, self.NodeAddedEvent)        #OpenIGTLink Server Setting        self.numIGTLConnectorNode = self.scene.GetNumberOfNodesByClass('vtkMRMLIGTLConnectorNode')                if self.numIGTLConnectorNode == 0:            self.oigtlConnector = slicer.vtkMRMLIGTLConnectorNode()            self.oigtlConnector.SetName(OIGTL_01_CONNECT_NAME)            self.oigtlConnector.SetTypeServer(OIGTL_01_PORT)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ConnectedEvent,    self.OpenIGTLinkConnected)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DisconnectedEvent, self.OpenIGTLinkDisconnected)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ActivatedEvent,    self.OpenIGTLinkActivated)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DeactivatedEvent,  self.OpenIGTLinkDeactivated)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ReceiveEvent,      self.OpenIGTLinkReceive)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.NewDeviceEvent,    self.OpenIGTLinkNewDevice)            #self.oigtlInitialized = False            #self.numOIGTLConnectorNode = 0;            slicer.mrmlScene.AddNode(self.oigtlConnector)            self.oigtlConnector.Start()        else:            node = self.scene.GetNodesByName(OIGTL_01_CONNECT_NAME)            if node.GetNumberOfItems() == 0:                self.oigtlConnector = slicer.vtkMRMLIGTLConnectorNode()                self.oigtlConnector.SetName(OIGTL_01_CONNECT_NAME)                self.oigtlConnector.SetTypeServer(OIGTL_01_PORT)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ConnectedEvent,    self.OpenIGTLinkConnected)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DisconnectedEvent, self.OpenIGTLinkDisconnected)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ActivatedEvent,    self.OpenIGTLinkActivated)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DeactivatedEvent,  self.OpenIGTLinkDeactivated)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ReceiveEvent,      self.OpenIGTLinkReceive)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.NewDeviceEvent,    self.OpenIGTLinkNewDevice)                #self.oigtlInitialized = False                            #self.numOIGTLConnectorNode = 0;                slicer.mrmlScene.AddNode(self.oigtlConnector)                self.oigtlConnector.Start()                def setup(self):        # Instantiate and connect widgets ...                # Collapsible button for OpenIGTLink Setting        self.oigtlServerSettingCollapsibleButton = ctk.ctkCollapsibleButton()        self.oigtlServerSettingCollapsibleButton.text = "OpenIGTLink Setting"        self.layout.addWidget(self.oigtlServerSettingCollapsibleButton)                        # Layout within the OpenIGTLink Setting collapsible button        self.oigtlServerSettingFormLayout = qt.QFormLayout(self.oigtlServerSettingCollapsibleButton)                # grid        self.gridSS0 = qt.QGridLayout()        self.gridSS1 = qt.QGridLayout()        self.gridSS2 = qt.QGridLayout()        self.oigtlServerSettingFormLayout.addRow(self.gridSS0)        self.oigtlServerSettingFormLayout.addRow(self.gridSS1)        self.oigtlServerSettingFormLayout.addRow(self.gridSS2)                # OpenIGTLink IO Configuration View        self.ioConfigurationView = slicer.qMRMLTreeView(self.parent)        self.ioConfigurationView.setObjectName('IOConfiguration')        self.ioConfigurationView.setMRMLScene(slicer.mrmlScene)        self.gridSS0.addWidget(self.ioConfigurationView, 0, 0, 1, 1)        # OpenIGTLink Server Setting button        self.oigtlServerSettingButton = qt.QPushButton("OpenIGTLink Server Setting")        self.oigtlServerSettingButton.toolTip = "Server Setting for OpenIGTLink Connection"        self.gridSS1.addWidget(self.oigtlServerSettingButton, 0, 0, 1, 1)        #self.oigtlServerSettingFormLayout.addWidget(self.oigtlServerSettingButton)        self.oigtlServerSettingButton.connect('clicked(bool)', self.onOIGTLServerSettingButtonClicked)                        # Add vertical spacer#        self.layout.addStretch(1)                        # Locator Visibility button        self.oigtlLocatorVisibilityButton = qt.QPushButton("OpenIGTLink Locator Visibility")        self.oigtlLocatorVisibilityButton.toolTip = "Locator Visibility Setting for Tracking Data from OpenIGTLink Connection"        self.gridSS2.addWidget(self.oigtlLocatorVisibilityButton, 0, 0, 1, 1)        #self.oigtlServerSettingFormLayout.addWidget(self.oigtlLocatorVisibilityButton)        self.oigtlLocatorVisibilityButton.connect('clicked(bool)', self.onOIGTLLocatorVisibilityButtonClicked)        # US Plane Model CheckBox        self.USPlaneModelCheckBox = qt.QCheckBox("US Plane")        self.USPlaneModelCheckBox.setChecked(False)        self.gridSS2.addWidget(self.USPlaneModelCheckBox, 0, 2, 1, 1)        self.USPlaneModelCheckBox.connect('toggled(bool)', self.onUSPlaneModelCheckBoxChecked)        # Collapeible Button for Registration        self.registrationCollapsibleButton = ctk.ctkCollapsibleButton()        self.registrationCollapsibleButton.text = "Registration"        self.layout.addWidget(self.registrationCollapsibleButton)            # Layout within the Registration collapsible button        self.registrationFormLayout = qt.QFormLayout(self.registrationCollapsibleButton)                # grid for the registration        self.gridReg0 = qt.QGridLayout()        self.gridReg1 = qt.QGridLayout()        self.registrationFormLayout.addRow(self.gridReg0)        self.registrationFormLayout.addRow(self.gridReg1)                    # Registration Matrix selector        self.registrationMatrixSelector = qt.QLabel("Registration Matrix: ", self.parent)        self.gridReg0.addWidget(self.registrationMatrixSelector, 0, 0, 1, 1)        self.registrationMatrixSelector = slicer.qMRMLNodeComboBox(self.parent)        self.registrationMatrixSelector.nodeTypes = ( ("vtkMRMLLinearTransformNode"), "" )        self.registrationMatrixSelector.setMRMLScene(self.scene)        self.registrationMatrixSelector.renameEnabled = True        #self.linearTransformSelector.addEnabled = False        #self.linearTransformSelector.removeEnabled = False        self.gridReg0.addWidget(self.registrationMatrixSelector, 0, 1, 1, 1)        # Registration Matrix Apply Button        self.registrationMatrixApplyButton = qt.QPushButton("Apply Registration Matrix")        self.registrationMatrixApplyButton.toolTip = "Applying Registration Matrix for the PA Navigation"        self.gridReg1.addWidget(self.registrationMatrixApplyButton, 0, 0, 1, 1)        self.registrationMatrixApplyButton.connect('clicked(bool)', self.onApplyRegistrationMatrixButtonClicked)                        def onOIGTLServerSettingButtonClicked(self):        #OpenIGTLink Server Setting        self.numIGTLConnectorNode = self.scene.GetNumberOfNodesByClass('vtkMRMLIGTLConnectorNode')        if self.numIGTLConnectorNode == 0:            self.oigtlConnector = slicer.vtkMRMLIGTLConnectorNode()            self.oigtlConnector.SetName(OIGTL_01_CONNECT_NAME)            self.oigtlConnector.SetTypeServer(OIGTL_01_PORT)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ConnectedEvent,    self.OpenIGTLinkConnected)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DisconnectedEvent, self.OpenIGTLinkDisconnected)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ActivatedEvent,    self.OpenIGTLinkActivated)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DeactivatedEvent,  self.OpenIGTLinkDeactivated)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ReceiveEvent,      self.OpenIGTLinkReceive)            self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.NewDeviceEvent,    self.OpenIGTLinkNewDevice)            #self.oigtlInitialized = False                        #self.numOIGTLConnectorNode = 0;            slicer.mrmlScene.AddNode(self.oigtlConnector)            self.oigtlConnector.Start()                        self.oigtlConnector1 = slicer.vtkMRMLIGTLConnectorNode()            self.oigtlConnector1.SetName(OIGTL_02_CONNECT_NAME)            self.oigtlConnector1.SetTypeServer(OIGTL_02_PORT)            self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ConnectedEvent,    self.OpenIGTLinkConnected)            self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DisconnectedEvent, self.OpenIGTLinkDisconnected)            self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ActivatedEvent,    self.OpenIGTLinkActivated)            self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DeactivatedEvent,  self.OpenIGTLinkDeactivated)            self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ReceiveEvent,      self.OpenIGTLinkReceive)            self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.NewDeviceEvent,    self.OpenIGTLinkNewDevice)            #self.oigtlInitialized = False                        #self.numOIGTLConnectorNode = 0;            slicer.mrmlScene.AddNode(self.oigtlConnector1)            self.oigtlConnector1.Start()        else:            node = self.scene.GetNodesByName(OIGTL_01_CONNECT_NAME)            if node.GetNumberOfItems() == 0:                self.oigtlConnector = slicer.vtkMRMLIGTLConnectorNode()                self.oigtlConnector.SetName(OIGTL_01_CONNECT_NAME)                self.oigtlConnector.SetTypeServer(OIGTL_01_PORT)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ConnectedEvent,    self.OpenIGTLinkConnected)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DisconnectedEvent, self.OpenIGTLinkDisconnected)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ActivatedEvent,    self.OpenIGTLinkActivated)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DeactivatedEvent,  self.OpenIGTLinkDeactivated)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ReceiveEvent,      self.OpenIGTLinkReceive)                self.oigtlConnector.AddObserver(slicer.vtkMRMLIGTLConnectorNode.NewDeviceEvent,    self.OpenIGTLinkNewDevice)                #self.oigtlInitialized = False                                #self.numOIGTLConnectorNode = 0;                slicer.mrmlScene.AddNode(self.oigtlConnector)                self.oigtlConnector.Start()                        node1 = self.scene.GetNodesByName(OIGTL_02_CONNECT_NAME)            if node1.GetNumberOfItems() == 0:                self.oigtlConnector1 = slicer.vtkMRMLIGTLConnectorNode()                self.oigtlConnector1.SetName(OIGTL_02_CONNECT_NAME)                self.oigtlConnector1.SetTypeServer(OIGTL_02_PORT)                self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ConnectedEvent,    self.OpenIGTLinkConnected)                self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DisconnectedEvent, self.OpenIGTLinkDisconnected)                self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ActivatedEvent,    self.OpenIGTLinkActivated)                self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.DeactivatedEvent,  self.OpenIGTLinkDeactivated)                self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.ReceiveEvent,      self.OpenIGTLinkReceive)                self.oigtlConnector1.AddObserver(slicer.vtkMRMLIGTLConnectorNode.NewDeviceEvent,    self.OpenIGTLinkNewDevice)                #self.oigtlInitialized = False                                #self.numOIGTLConnectorNode = 0;                slicer.mrmlScene.AddNode(self.oigtlConnector1)                self.oigtlConnector1.Start()                def onOIGTLLocatorVisibilityButtonClicked(self):        collectNode = self.scene.GetNodesByName(OIGTL_01_CONNECT_NAME)             # vtkCollection        if collectNode.GetNumberOfItems() == 1:            oigtlConnectorNode = collectNode.GetItemAsObject(0)                     # vtkMRMLIGTLConnectorNode            linearTransformNode = oigtlConnectorNode.GetIncomingMRMLNode(0)         # vtkMRMLLinearTransformNode            oigtlLogic = slicer.modules.openigtlinkif.logic()                       # vtkSlicerOpenIGTLinkIFLogic            oigtlTransform = oigtlLogic.GetConverter(0)                             # vtkIGTLToMRMLLinearTransform            #oigtlTransform.SetVisibility(1, slicer.mrmlScene, linearTransformNode)                        #self.onCreateLocatorModel('locator', 0, 1, 1)                        locatorModelNode = slicer.vtkMRMLModelNode()            locatorDisplayNode = slicer.vtkMRMLModelDisplayNode()            # Sphere represents the locator tip            sphere = vtk.vtkSphereSource()            sphere.SetRadius(3.0)            sphere.SetCenter(0, 0, 0)            sphere.Update()                        # Loading STL Model of Ultrasound Transducer            filename = "/Users/xiaoli/Desktop/slicer_module/L3-8_40EP_Assembly.vtk"            #reader = vtk.vtkSTLReader()            reader = vtk.vtkPolyDataReader()            reader.SetFileName(filename)                    apd = vtk.vtkAppendPolyData()            apd.AddInputConnection(sphere.GetOutputPort())            #apd.AddInput(tfilter.GetOutput())            apd.AddInputConnection(reader.GetOutputPort())            apd.Update()                    locatorModelNode.SetAndObservePolyData(apd.GetOutput())                    color = [1, 0, 1]            #locatorDisp.SetPolyData(locatorModelNode.GetPolyData())            locatorDisplayNode.SetColor(color)                    slicer.mrmlScene.SaveStateForUndo()            slicer.mrmlScene.AddNode(locatorDisplayNode)            lm = slicer.mrmlScene.AddNode(locatorModelNode)            locatorDisplayNode.SetScene(slicer.mrmlScene)            locatorModelNode.SetName('Locator_DataTransfer_Probe_0')            locatorModelNode.SetScene(slicer.mrmlScene)            locatorModelNode.SetAndObserveDisplayNodeID(locatorDisplayNode.GetID())            locatorModelNode.SetHideFromEditors(0)            locatorModelNode.SetAndObserveTransformNodeID(linearTransformNode.GetID())            locatorModelNode.InvokeEvent(slicer.vtkMRMLTransformableNode.TransformModifiedEvent)                                    # 3D model for US Image Plane            self.usPlaneShape = vtk.vtkCubeSource()            self.usPlaneShape.SetXLength(40.0)            self.usPlaneShape.SetYLength(200.0)            self.usPlaneShape.SetZLength(6.0)            self.usPlaneShape.SetCenter(0, 0, 0)            self.usPlaneShape.Update()                        self.usPlane = vtk.vtkTransformPolyDataFilter()            self.usPlaneTrans = vtk.vtkTransform()            self.usPlaneTrans.Translate(20.0, 100.0, 0.0)            self.usPlaneTrans.Update()            self.usPlane.SetInputConnection(self.usPlaneShape.GetOutputPort())            self.usPlane.SetTransform(self.usPlaneTrans)            self.usPlane.Update()                        self.cleaner = vtk.vtkTriangleFilter()            self.cleaner.SetInputConnection(self.usPlane.GetOutputPort())            self.cleaner.Update()                        self.displayNode = slicer.vtkMRMLModelDisplayNode()            self.displayNode.SetScene(slicer.mrmlScene)            self.displayNode.SetColor(1.0, 0.5, 0.5)            self.displayNode.SetOpacity(0.7)            self.displayNode.VisibilityOn()            self.displayNode.SliceIntersectionVisibilityOn()                        slicer.mrmlScene.AddNode(self.displayNode)                        self.modelNode = slicer.vtkMRMLModelNode()            self.modelNode.SetName("US Plane")            self.modelNode.SetScene(slicer.mrmlScene)            self.modelNode.SetHideFromEditors(0)            self.modelNode.SetAndObservePolyData(self.cleaner.GetOutput())            self.modelNode.SetAndObserveTransformNodeID(linearTransformNode.GetID())            self.modelNode.InvokeEvent(slicer.vtkMRMLTransformableNode.TransformModifiedEvent)                        if self.displayNode.GetID():                self.modelNode.SetAndObserveDisplayNodeID(self.displayNode.GetID())                slicer.mrmlScene.AddNode(self.modelNode)            else:                print 'US Plane does not yet have ID'                                    self.USPlaneModelCheckBox.setChecked(True)        def onUSPlaneModelCheckBoxChecked(self):        if self.displayNode:            if self.USPlaneModelCheckBox.checkState():                self.displayNode.SliceIntersectionVisibilityOn()                self.displayNode.VisibilityOn()            else:                self.displayNode.VisibilityOff()                self.displayNode.SliceIntersectionVisibilityOff()    def onApplyRegistrationMatrixButtonClicked(self):        selectedNode = self.registrationMatrixSelector.currentNode()        #qt.QMessageBox.information( slicer.util.mainWindow(), 'Information', selectedNode.GetID() )            collectNode = self.scene.GetNodesByName(OIGTL_01_DEVICE_NAME)                    # vtkCollector        transformNode = collectNode.GetItemAsObject(0)                            # vtkMRMLLinearTransformNode        transformNode.SetAndObserveTransformNodeID(selectedNode.GetID())        transformNode.InvokeEvent(slicer.vtkMRMLTransformableNode.TransformModifiedEvent)    def WarningDialog(self, message):        qt.QMessageBox.warning(slicer.util.mainWindow(), "Warning", message)    def ErrorDialog(self, message):        qt.QMessageBox.critical(slicer.util.mainWindow(), "Critical", message)    def InformationDialog(self, message):        qt.QMessageBox.information(slicer.util.mainWindow(), "Information", message)    def OpenIGTLinkConnected(self, a, b):        print "OpenIGTLink Connected"    def OpenIGTLinkDisconnected(self):        print "OpenIGTLink Disconnected"    def OpenIGTLinkActivated(self, a, b):        print "oigtlConnector Activated, State: ", self.oigtlConnector.GetState()    def OpenIGTLinkDeactivated(self, a, b):        print "OpenIGTLink Deactivated"    def OpenIGTLinkReceive(self, a, b):        print "OpenIGTLink Receive"    def OpenIGTLinkNewDevice(self, a, b):        print "OpenIGTLink New Device"    # When a new node is added to the scene,    def NodeAddedEvent(self, caller, event):        numOIGTLConnectorNode = self.scene.GetNumberOfNodesByClass('vtkMRMLIGTLConnectorNode')        if numOIGTLConnectorNode != self.numIGTLConnectorNode:            self.numIGTLConnectorNode = numOIGTLConnectorNode        if self.oigtlConnector.Start() == 1:            print "OpenIGTLink connection #1 has been established."        else:            print "Couldn't establish an OpenIGTLink Connection #1."            return